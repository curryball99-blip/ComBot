{"ast":null,"code":"function partialRight(func) {\n  for (var _len = arguments.length, partialArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    partialArgs[_key - 1] = arguments[_key];\n  }\n  return partialRightImpl(func, placeholderSymbol, ...partialArgs);\n}\nfunction partialRightImpl(func, placeholder) {\n  for (var _len2 = arguments.length, partialArgs = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    partialArgs[_key2 - 2] = arguments[_key2];\n  }\n  const partialedRight = function () {\n    for (var _len3 = arguments.length, providedArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      providedArgs[_key3] = arguments[_key3];\n    }\n    const placeholderLength = partialArgs.filter(arg => arg === placeholder).length;\n    const rangeLength = Math.max(providedArgs.length - placeholderLength, 0);\n    const remainingArgs = providedArgs.slice(0, rangeLength);\n    let providedArgsIndex = rangeLength;\n    const substitutedArgs = partialArgs.slice().map(arg => arg === placeholder ? providedArgs[providedArgsIndex++] : arg);\n    return func.apply(this, remainingArgs.concat(substitutedArgs));\n  };\n  if (func.prototype) {\n    partialedRight.prototype = Object.create(func.prototype);\n  }\n  return partialedRight;\n}\nconst placeholderSymbol = Symbol('partialRight.placeholder');\npartialRight.placeholder = placeholderSymbol;\nexport { partialRight, partialRightImpl };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}