{"ast":null,"code":"import { isPlainObject } from '../predicate/isPlainObject.mjs';\nfunction flattenObject(object, {\n  delimiter = '.'\n} = {}) {\n  return flattenObjectImpl(object, '', delimiter);\n}\nfunction flattenObjectImpl(object, prefix = '', delimiter = '.') {\n  const result = {};\n  const keys = Object.keys(object);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = object[key];\n    const prefixedKey = prefix ? `${prefix}${delimiter}${key}` : key;\n    if (isPlainObject(value) && Object.keys(value).length > 0) {\n      Object.assign(result, flattenObjectImpl(value, prefixedKey, delimiter));\n      continue;\n    }\n    if (Array.isArray(value)) {\n      Object.assign(result, flattenObjectImpl(value, prefixedKey, delimiter));\n      continue;\n    }\n    result[prefixedKey] = value;\n  }\n  return result;\n}\nexport { flattenObject };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}