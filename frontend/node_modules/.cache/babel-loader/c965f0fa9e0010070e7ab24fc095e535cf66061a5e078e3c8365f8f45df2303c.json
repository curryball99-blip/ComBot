{"ast":null,"code":"import { getSymbols } from '../compat/_internal/getSymbols.mjs';\nimport { getTag } from '../compat/_internal/getTag.mjs';\nimport { uint32ArrayTag, uint16ArrayTag, uint8ClampedArrayTag, uint8ArrayTag, symbolTag, stringTag, setTag, regexpTag, objectTag, numberTag, mapTag, int32ArrayTag, int16ArrayTag, int8ArrayTag, float64ArrayTag, float32ArrayTag, dateTag, booleanTag, dataViewTag, arrayBufferTag, arrayTag, argumentsTag } from '../compat/_internal/tags.mjs';\nimport { isPrimitive } from '../predicate/isPrimitive.mjs';\nimport { isTypedArray } from '../predicate/isTypedArray.mjs';\nfunction cloneDeepWith(obj, cloneValue) {\n  return cloneDeepWithImpl(obj, undefined, obj, new Map(), cloneValue);\n}\nfunction cloneDeepWithImpl(valueToClone, keyToClone, objectToClone) {\n  let stack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n  let cloneValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n  const cloned = cloneValue === null || cloneValue === void 0 ? void 0 : cloneValue(valueToClone, keyToClone, objectToClone, stack);\n  if (cloned !== undefined) {\n    return cloned;\n  }\n  if (isPrimitive(valueToClone)) {\n    return valueToClone;\n  }\n  if (stack.has(valueToClone)) {\n    return stack.get(valueToClone);\n  }\n  if (Array.isArray(valueToClone)) {\n    const result = new Array(valueToClone.length);\n    stack.set(valueToClone, result);\n    for (let i = 0; i < valueToClone.length; i++) {\n      result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);\n    }\n    if (Object.hasOwn(valueToClone, 'index')) {\n      result.index = valueToClone.index;\n    }\n    if (Object.hasOwn(valueToClone, 'input')) {\n      result.input = valueToClone.input;\n    }\n    return result;\n  }\n  if (valueToClone instanceof Date) {\n    return new Date(valueToClone.getTime());\n  }\n  if (valueToClone instanceof RegExp) {\n    const result = new RegExp(valueToClone.source, valueToClone.flags);\n    result.lastIndex = valueToClone.lastIndex;\n    return result;\n  }\n  if (valueToClone instanceof Map) {\n    const result = new Map();\n    stack.set(valueToClone, result);\n    for (const [key, value] of valueToClone) {\n      result.set(key, cloneDeepWithImpl(value, key, objectToClone, stack, cloneValue));\n    }\n    return result;\n  }\n  if (valueToClone instanceof Set) {\n    const result = new Set();\n    stack.set(valueToClone, result);\n    for (const value of valueToClone) {\n      result.add(cloneDeepWithImpl(value, undefined, objectToClone, stack, cloneValue));\n    }\n    return result;\n  }\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(valueToClone)) {\n    return valueToClone.subarray();\n  }\n  if (isTypedArray(valueToClone)) {\n    const result = new (Object.getPrototypeOf(valueToClone).constructor)(valueToClone.length);\n    stack.set(valueToClone, result);\n    for (let i = 0; i < valueToClone.length; i++) {\n      result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);\n    }\n    return result;\n  }\n  if (valueToClone instanceof ArrayBuffer || typeof SharedArrayBuffer !== 'undefined' && valueToClone instanceof SharedArrayBuffer) {\n    return valueToClone.slice(0);\n  }\n  if (valueToClone instanceof DataView) {\n    const result = new DataView(valueToClone.buffer.slice(0), valueToClone.byteOffset, valueToClone.byteLength);\n    stack.set(valueToClone, result);\n    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);\n    return result;\n  }\n  if (typeof File !== 'undefined' && valueToClone instanceof File) {\n    const result = new File([valueToClone], valueToClone.name, {\n      type: valueToClone.type\n    });\n    stack.set(valueToClone, result);\n    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);\n    return result;\n  }\n  if (valueToClone instanceof Blob) {\n    const result = new Blob([valueToClone], {\n      type: valueToClone.type\n    });\n    stack.set(valueToClone, result);\n    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);\n    return result;\n  }\n  if (valueToClone instanceof Error) {\n    const result = new valueToClone.constructor();\n    stack.set(valueToClone, result);\n    result.message = valueToClone.message;\n    result.name = valueToClone.name;\n    result.stack = valueToClone.stack;\n    result.cause = valueToClone.cause;\n    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);\n    return result;\n  }\n  if (typeof valueToClone === 'object' && isCloneableObject(valueToClone)) {\n    const result = Object.create(Object.getPrototypeOf(valueToClone));\n    stack.set(valueToClone, result);\n    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);\n    return result;\n  }\n  return valueToClone;\n}\nfunction copyProperties(target, source) {\n  let objectToClone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : target;\n  let stack = arguments.length > 3 ? arguments[3] : undefined;\n  let cloneValue = arguments.length > 4 ? arguments[4] : undefined;\n  const keys = [...Object.keys(source), ...getSymbols(source)];\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const descriptor = Object.getOwnPropertyDescriptor(target, key);\n    if (descriptor == null || descriptor.writable) {\n      target[key] = cloneDeepWithImpl(source[key], key, objectToClone, stack, cloneValue);\n    }\n  }\n}\nfunction isCloneableObject(object) {\n  switch (getTag(object)) {\n    case argumentsTag:\n    case arrayTag:\n    case arrayBufferTag:\n    case dataViewTag:\n    case booleanTag:\n    case dateTag:\n    case float32ArrayTag:\n    case float64ArrayTag:\n    case int8ArrayTag:\n    case int16ArrayTag:\n    case int32ArrayTag:\n    case mapTag:\n    case numberTag:\n    case objectTag:\n    case regexpTag:\n    case setTag:\n    case stringTag:\n    case symbolTag:\n    case uint8ArrayTag:\n    case uint8ClampedArrayTag:\n    case uint16ArrayTag:\n    case uint32ArrayTag:\n      {\n        return true;\n      }\n    default:\n      {\n        return false;\n      }\n  }\n}\nexport { cloneDeepWith, cloneDeepWithImpl, copyProperties };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}