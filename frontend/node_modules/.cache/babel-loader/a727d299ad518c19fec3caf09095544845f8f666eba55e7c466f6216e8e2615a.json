{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { chatAPI, sessionAPI } from '../services/api';\nconst useChatStore = create(persist((set, get) => ({\n  // Current conversation state\n  currentSessionId: null,\n  messages: [],\n  isLoading: false,\n  isTyping: false,\n  error: null,\n  // Conversation management\n  conversations: [],\n  isLoadingConversations: false,\n  // UI state\n  sidebarOpen: true,\n  uploadModalOpen: false,\n  // Initialize store (load conversations on app start)\n  initialize: async () => {\n    console.log('🚀 Initializing chat store...');\n    try {\n      await get().loadConversations();\n\n      // If no current session and no conversations, create first one\n      const {\n        currentSessionId,\n        conversations\n      } = get();\n      if (!currentSessionId && conversations.length === 0) {\n        await get().startNewConversation('Welcome Chat');\n      }\n      console.log('✅ Chat store initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize chat store:', error);\n    }\n  },\n  // Actions\n  setCurrentSession: async sessionId => {\n    const {\n      currentSessionId\n    } = get();\n\n    // Don't reload if it's the same session\n    if (currentSessionId === sessionId) {\n      return;\n    }\n    console.log('🔄 Switching to session:', sessionId);\n\n    // Load conversation history if sessionId exists\n    if (sessionId) {\n      set({\n        currentSessionId: sessionId,\n        error: null\n      });\n      await get().loadConversationHistory(sessionId);\n    } else {\n      // Only clear messages for new conversation\n      set({\n        currentSessionId: sessionId,\n        messages: [],\n        error: null\n      });\n    }\n  },\n  // Send a message (temporarily forcing non-streaming until backend streaming stabilized)\n  sendMessage: async (messageText, streaming = false, useInternetSearch = false, aiParams = {}) => {\n    const {\n      currentSessionId\n    } = get();\n    set({\n      isLoading: true,\n      error: null\n    });\n\n    // Add user message immediately to UI\n    const userMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: messageText,\n      timestamp: new Date().toISOString()\n    };\n    set(state => ({\n      messages: [...state.messages, userMessage],\n      isTyping: true\n    }));\n    try {\n      {\n        // Non-streaming response (fallback)\n        // Ensure UI defaults (can be overridden by caller-supplied aiParams)\n        const mergedParams = {\n          legacy_mode: true,\n          ...aiParams\n        };\n        const response = await chatAPI.sendMessage(messageText, currentSessionId, false, useInternetSearch, mergedParams);\n        const botMessage = {\n          id: (Date.now() + 1).toString(),\n          type: 'bot',\n          content: response.response,\n          timestamp: response.timestamp || new Date().toISOString(),\n          sources: response.sources || [],\n          session_id: response.session_id\n        };\n        set(state => ({\n          messages: [...state.messages, botMessage],\n          currentSessionId: response.session_id,\n          isLoading: false,\n          isTyping: false\n        }));\n        get().loadConversations();\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'error',\n        content: error.message || 'Failed to get response. Please try again.',\n        timestamp: new Date().toISOString()\n      };\n      set(state => ({\n        messages: [...state.messages, errorMessage],\n        isLoading: false,\n        isTyping: false,\n        error: error.message\n      }));\n    }\n  },\n  // Load conversation history (UPDATED for new API)\n  loadConversationHistory: async sessionId => {\n    if (!sessionId) return;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      console.log('📜 Loading history for session:', sessionId);\n\n      // Use new session API\n      const history = await sessionAPI.getSessionHistory(sessionId);\n      console.log('✅ Loaded history:', history);\n\n      // Convert new history format to message format\n      const messages = [];\n      if (history && Array.isArray(history)) {\n        history.forEach((entry, index) => {\n          // New API format has user_message and assistant_response\n          if (entry.user_message) {\n            messages.push({\n              id: `${entry.message_id || index}-user`,\n              type: 'user',\n              content: entry.user_message,\n              timestamp: entry.timestamp\n            });\n          }\n          if (entry.assistant_response) {\n            messages.push({\n              id: `${entry.message_id || index}-bot`,\n              type: 'bot',\n              content: entry.assistant_response,\n              timestamp: entry.timestamp,\n              sources: entry.sources || []\n            });\n          }\n        });\n      }\n      console.log('📝 Converted messages:', messages.length, 'messages');\n      set({\n        messages,\n        isLoading: false\n      });\n    } catch (error) {\n      console.error('❌ Failed to load conversation history:', error);\n      set({\n        isLoading: false,\n        error: error.message\n      });\n    }\n  },\n  // Load all conversations (UPDATED for new API)\n  loadConversations: async () => {\n    set({\n      isLoadingConversations: true\n    });\n    try {\n      const conversations = await sessionAPI.listSessions();\n      console.log('💬 Loaded conversations:', conversations);\n      set({\n        conversations: conversations || [],\n        isLoadingConversations: false\n      });\n    } catch (error) {\n      console.error('Failed to load conversations:', error);\n      set({\n        conversations: [],\n        isLoadingConversations: false\n      });\n    }\n  },\n  // Start new conversation (UPDATED - creates proper backend session)\n  startNewConversation: async (title = null) => {\n    try {\n      console.log('🆕 Creating new conversation...');\n\n      // Create session via backend API\n      const newSession = await sessionAPI.createSession('default_user', title);\n      set({\n        currentSessionId: newSession.session_id,\n        messages: [],\n        error: null\n      });\n\n      // Reload conversations to show new one in sidebar\n      await get().loadConversations();\n      console.log('✅ New conversation created:', newSession.session_id);\n      return newSession;\n    } catch (error) {\n      console.error('❌ Failed to create new conversation:', error);\n\n      // Fallback to local session if backend fails\n      const fallbackSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      set({\n        currentSessionId: fallbackSessionId,\n        messages: [],\n        error: null\n      });\n      throw error;\n    }\n  },\n  // Delete conversation (UPDATED for new API)\n  deleteConversation: async sessionId => {\n    try {\n      console.log('🗑️ Deleting conversation:', sessionId);\n\n      // Delete via backend API\n      await sessionAPI.deleteSession(sessionId);\n\n      // Remove from conversations list\n      set(state => ({\n        conversations: state.conversations.filter(conv => conv.session_id !== sessionId)\n      }));\n\n      // If it was the current conversation, start new one\n      const {\n        currentSessionId\n      } = get();\n      if (currentSessionId === sessionId) {\n        await get().startNewConversation();\n      }\n      console.log('✅ Conversation deleted successfully');\n    } catch (error) {\n      console.error('❌ Failed to delete conversation:', error);\n      set({\n        error: error.message\n      });\n    }\n  },\n  // Rename conversation\n  renameConversation: async (sessionId, newTitle) => {\n    try {\n      // Update locally first for immediate feedback\n      set(state => ({\n        conversations: state.conversations.map(conv => conv.session_id === sessionId ? {\n          ...conv,\n          title: newTitle\n        } : conv)\n      }));\n\n      // TODO: Add API call when backend supports it\n      // await chatAPI.renameConversation(sessionId, newTitle);\n    } catch (error) {\n      console.error('Failed to rename conversation:', error);\n      // Revert on error\n      get().loadConversations();\n      set({\n        error: error.message\n      });\n    }\n  },\n  // Clear messages (for current conversation)\n  clearMessages: () => {\n    set({\n      messages: [],\n      error: null\n    });\n  },\n  // Clear error\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  // Toggle sidebar\n  toggleSidebar: () => {\n    set(state => ({\n      sidebarOpen: !state.sidebarOpen\n    }));\n  },\n  // Toggle upload modal\n  toggleUploadModal: () => {\n    set(state => ({\n      uploadModalOpen: !state.uploadModalOpen\n    }));\n  },\n  // Set loading state\n  setLoading: isLoading => {\n    set({\n      isLoading\n    });\n  },\n  // Set typing state\n  setTyping: isTyping => {\n    set({\n      isTyping\n    });\n  }\n}), {\n  name: 'comviva-chat-store',\n  partialize: state => ({\n    currentSessionId: state.currentSessionId,\n    messages: state.messages,\n    sidebarOpen: state.sidebarOpen,\n    conversations: state.conversations\n  })\n}));\nexport default useChatStore;","map":{"version":3,"names":["create","persist","chatAPI","sessionAPI","useChatStore","set","get","currentSessionId","messages","isLoading","isTyping","error","conversations","isLoadingConversations","sidebarOpen","uploadModalOpen","initialize","console","log","loadConversations","length","startNewConversation","setCurrentSession","sessionId","loadConversationHistory","sendMessage","messageText","streaming","useInternetSearch","aiParams","userMessage","id","Date","now","toString","type","content","timestamp","toISOString","state","mergedParams","legacy_mode","response","botMessage","sources","session_id","errorMessage","message","history","getSessionHistory","Array","isArray","forEach","entry","index","user_message","push","message_id","assistant_response","listSessions","title","newSession","createSession","fallbackSessionId","Math","random","substr","deleteConversation","deleteSession","filter","conv","renameConversation","newTitle","map","clearMessages","clearError","toggleSidebar","toggleUploadModal","setLoading","setTyping","name","partialize"],"sources":["/home/ubuntu/Ravi/ComBot/frontend/src/stores/chatStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { chatAPI, sessionAPI } from '../services/api';\n\nconst useChatStore = create(\n  persist(\n    (set, get) => ({\n      // Current conversation state\n      currentSessionId: null,\n      messages: [],\n      isLoading: false,\n      isTyping: false,\n      error: null,\n\n      // Conversation management\n      conversations: [],\n      isLoadingConversations: false,\n\n      // UI state\n      sidebarOpen: true,\n      uploadModalOpen: false,\n\n      // Initialize store (load conversations on app start)\n      initialize: async () => {\n        console.log('🚀 Initializing chat store...');\n        try {\n          await get().loadConversations();\n          \n          // If no current session and no conversations, create first one\n          const { currentSessionId, conversations } = get();\n          if (!currentSessionId && conversations.length === 0) {\n            await get().startNewConversation('Welcome Chat');\n          }\n          \n          console.log('✅ Chat store initialized');\n        } catch (error) {\n          console.error('❌ Failed to initialize chat store:', error);\n        }\n      },\n\n      // Actions\n      setCurrentSession: async (sessionId) => {\n        const { currentSessionId } = get();\n\n        // Don't reload if it's the same session\n        if (currentSessionId === sessionId) {\n          return;\n        }\n\n        console.log('🔄 Switching to session:', sessionId);\n\n        // Load conversation history if sessionId exists\n        if (sessionId) {\n          set({ currentSessionId: sessionId, error: null });\n          await get().loadConversationHistory(sessionId);\n        } else {\n          // Only clear messages for new conversation\n          set({ currentSessionId: sessionId, messages: [], error: null });\n        }\n      },\n\n      // Send a message (temporarily forcing non-streaming until backend streaming stabilized)\n      sendMessage: async (messageText, streaming = false, useInternetSearch = false, aiParams = {}) => {\n        const { currentSessionId } = get();\n\n        set({ isLoading: true, error: null });\n\n        // Add user message immediately to UI\n        const userMessage = {\n          id: Date.now().toString(),\n          type: 'user',\n          content: messageText,\n          timestamp: new Date().toISOString(),\n        };\n\n        set((state) => ({\n          messages: [...state.messages, userMessage],\n          isTyping: true,\n        }));\n\n        try {\n          {\n            // Non-streaming response (fallback)\n            // Ensure UI defaults (can be overridden by caller-supplied aiParams)\n            const mergedParams = { legacy_mode: true, ...aiParams };\n            const response = await chatAPI.sendMessage(messageText, currentSessionId, false, useInternetSearch, mergedParams);\n\n            const botMessage = {\n              id: (Date.now() + 1).toString(),\n              type: 'bot',\n              content: response.response,\n              timestamp: response.timestamp || new Date().toISOString(),\n              sources: response.sources || [],\n              session_id: response.session_id,\n            };\n\n            set((state) => ({\n              messages: [...state.messages, botMessage],\n              currentSessionId: response.session_id,\n              isLoading: false,\n              isTyping: false,\n            }));\n\n            get().loadConversations();\n          }\n\n        } catch (error) {\n          console.error('Failed to send message:', error);\n\n          // Add error message\n          const errorMessage = {\n            id: (Date.now() + 1).toString(),\n            type: 'error',\n            content: error.message || 'Failed to get response. Please try again.',\n            timestamp: new Date().toISOString(),\n          };\n\n          set((state) => ({\n            messages: [...state.messages, errorMessage],\n            isLoading: false,\n            isTyping: false,\n            error: error.message,\n          }));\n        }\n      },\n\n      // Load conversation history (UPDATED for new API)\n      loadConversationHistory: async (sessionId) => {\n        if (!sessionId) return;\n\n        set({ isLoading: true, error: null });\n\n        try {\n          console.log('📜 Loading history for session:', sessionId);\n          \n          // Use new session API\n          const history = await sessionAPI.getSessionHistory(sessionId);\n          console.log('✅ Loaded history:', history);\n\n          // Convert new history format to message format\n          const messages = [];\n          if (history && Array.isArray(history)) {\n            history.forEach((entry, index) => {\n              // New API format has user_message and assistant_response\n              if (entry.user_message) {\n                messages.push({\n                  id: `${entry.message_id || index}-user`,\n                  type: 'user',\n                  content: entry.user_message,\n                  timestamp: entry.timestamp,\n                });\n              }\n              if (entry.assistant_response) {\n                messages.push({\n                  id: `${entry.message_id || index}-bot`,\n                  type: 'bot',\n                  content: entry.assistant_response,\n                  timestamp: entry.timestamp,\n                  sources: entry.sources || [],\n                });\n              }\n            });\n          }\n          \n          console.log('📝 Converted messages:', messages.length, 'messages');\n\n          set({\n            messages,\n            isLoading: false,\n          });\n\n        } catch (error) {\n          console.error('❌ Failed to load conversation history:', error);\n          set({\n            isLoading: false,\n            error: error.message,\n          });\n        }\n      },\n\n      // Load all conversations (UPDATED for new API)\n      loadConversations: async () => {\n        set({ isLoadingConversations: true });\n\n        try {\n          const conversations = await sessionAPI.listSessions();\n          console.log('💬 Loaded conversations:', conversations);\n          set({\n            conversations: conversations || [],\n            isLoadingConversations: false,\n          });\n        } catch (error) {\n          console.error('Failed to load conversations:', error);\n          set({\n            conversations: [],\n            isLoadingConversations: false,\n          });\n        }\n      },\n\n      // Start new conversation (UPDATED - creates proper backend session)\n      startNewConversation: async (title = null) => {\n        try {\n          console.log('🆕 Creating new conversation...');\n          \n          // Create session via backend API\n          const newSession = await sessionAPI.createSession('default_user', title);\n          \n          set({\n            currentSessionId: newSession.session_id,\n            messages: [],\n            error: null,\n          });\n\n          // Reload conversations to show new one in sidebar\n          await get().loadConversations();\n          \n          console.log('✅ New conversation created:', newSession.session_id);\n          return newSession;\n        } catch (error) {\n          console.error('❌ Failed to create new conversation:', error);\n          \n          // Fallback to local session if backend fails\n          const fallbackSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          set({\n            currentSessionId: fallbackSessionId,\n            messages: [],\n            error: null,\n          });\n          \n          throw error;\n        }\n      },\n\n      // Delete conversation (UPDATED for new API)\n      deleteConversation: async (sessionId) => {\n        try {\n          console.log('🗑️ Deleting conversation:', sessionId);\n          \n          // Delete via backend API\n          await sessionAPI.deleteSession(sessionId);\n\n          // Remove from conversations list\n          set((state) => ({\n            conversations: state.conversations.filter(\n              (conv) => conv.session_id !== sessionId\n            ),\n          }));\n\n          // If it was the current conversation, start new one\n          const { currentSessionId } = get();\n          if (currentSessionId === sessionId) {\n            await get().startNewConversation();\n          }\n          \n          console.log('✅ Conversation deleted successfully');\n\n        } catch (error) {\n          console.error('❌ Failed to delete conversation:', error);\n          set({ error: error.message });\n        }\n      },\n\n      // Rename conversation\n      renameConversation: async (sessionId, newTitle) => {\n        try {\n          // Update locally first for immediate feedback\n          set((state) => ({\n            conversations: state.conversations.map((conv) =>\n              conv.session_id === sessionId\n                ? { ...conv, title: newTitle }\n                : conv\n            ),\n          }));\n\n          // TODO: Add API call when backend supports it\n          // await chatAPI.renameConversation(sessionId, newTitle);\n\n        } catch (error) {\n          console.error('Failed to rename conversation:', error);\n          // Revert on error\n          get().loadConversations();\n          set({ error: error.message });\n        }\n      },\n\n      // Clear messages (for current conversation)\n      clearMessages: () => {\n        set({ messages: [], error: null });\n      },\n\n      // Clear error\n      clearError: () => {\n        set({ error: null });\n      },\n\n      // Toggle sidebar\n      toggleSidebar: () => {\n        set((state) => ({ sidebarOpen: !state.sidebarOpen }));\n      },\n\n      // Toggle upload modal\n      toggleUploadModal: () => {\n        set((state) => ({ uploadModalOpen: !state.uploadModalOpen }));\n      },\n\n      // Set loading state\n      setLoading: (isLoading) => {\n        set({ isLoading });\n      },\n\n      // Set typing state\n      setTyping: (isTyping) => {\n        set({ isTyping });\n      },\n    }),\n    {\n      name: 'comviva-chat-store',\n      partialize: (state) => ({\n        currentSessionId: state.currentSessionId,\n        messages: state.messages,\n        sidebarOpen: state.sidebarOpen,\n        conversations: state.conversations,\n      }),\n    }\n  )\n);\n\nexport default useChatStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}