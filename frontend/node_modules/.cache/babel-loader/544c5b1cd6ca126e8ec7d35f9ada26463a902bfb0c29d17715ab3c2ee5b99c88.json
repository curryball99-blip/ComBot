{"ast":null,"code":"import { isPrimitive } from '../predicate/isPrimitive.mjs';\nimport { isTypedArray } from '../predicate/isTypedArray.mjs';\nfunction clone(obj) {\n  if (isPrimitive(obj)) {\n    return obj;\n  }\n  if (Array.isArray(obj) || isTypedArray(obj) || obj instanceof ArrayBuffer || typeof SharedArrayBuffer !== 'undefined' && obj instanceof SharedArrayBuffer) {\n    return obj.slice(0);\n  }\n  const prototype = Object.getPrototypeOf(obj);\n  const Constructor = prototype.constructor;\n  if (obj instanceof Date || obj instanceof Map || obj instanceof Set) {\n    return new Constructor(obj);\n  }\n  if (obj instanceof RegExp) {\n    const newRegExp = new Constructor(obj);\n    newRegExp.lastIndex = obj.lastIndex;\n    return newRegExp;\n  }\n  if (obj instanceof DataView) {\n    return new Constructor(obj.buffer.slice(0));\n  }\n  if (obj instanceof Error) {\n    const newError = new Constructor(obj.message);\n    newError.stack = obj.stack;\n    newError.name = obj.name;\n    newError.cause = obj.cause;\n    return newError;\n  }\n  if (typeof File !== 'undefined' && obj instanceof File) {\n    const newFile = new Constructor([obj], obj.name, {\n      type: obj.type,\n      lastModified: obj.lastModified\n    });\n    return newFile;\n  }\n  if (typeof obj === 'object') {\n    const newObject = Object.create(prototype);\n    return Object.assign(newObject, obj);\n  }\n  return obj;\n}\nexport { clone };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}