{"ast":null,"code":"import _awaitAsyncGenerator from\"/home/im/Druthik/clean_rag/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";import _wrapAsyncGenerator from\"/home/im/Druthik/clean_rag/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'';const api=axios.create({baseURL:\"\".concat(API_BASE_URL,\"/api\"),timeout:120000,// 2 minutes for chat\nheaders:{'Content-Type':'application/json'}});// Request interceptor for logging\napi.interceptors.request.use(config=>{var _config$method;console.log(\"API Request: \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" \").concat(config.url));return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>{return response;},error=>{var _error$response;console.error('API Response Error:',error);if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===500){console.error('Server Error:',error.response.data);}else if(error.code==='ECONNABORTED'){console.error('Request timeout');}else if(!error.response){console.error('Network error - server might be down');}return Promise.reject(error);});export const chatAPI={// Send a message and get response\nsendMessage:async function(message){let sessionId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let stream=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;try{if(stream){// Return a stream for server-sent events\nconst response=await fetch(\"/api/chat\",{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message,session_id:sessionId,stream:true})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return response;}else{const response=await api.post('/chat',{message,session_id:sessionId,stream:false});return response.data;}}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to send message');}},// Process streaming response\nprocessStream:function(){var _ref=_wrapAsyncGenerator(function(response){let onChunk=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let onComplete=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let onError=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;return function*(){try{const reader=response.body.getReader();const decoder=new TextDecoder();let buffer='';while(true){const{done,value}=yield _awaitAsyncGenerator(reader.read());if(done)break;buffer+=decoder.decode(value,{stream:true});const lines=buffer.split('\\n');buffer=lines.pop();// Keep the incomplete line in buffer\nfor(const line of lines){if(line.startsWith('data: ')){try{const data=JSON.parse(line.slice(6));if(data.type==='chunk'&&data.content){if(onChunk)onChunk(data.content);yield data.content;}else if(data.type==='complete'){if(onComplete)onComplete(data);return data;}else if(data.type==='error'){if(onError)onError(data.content);throw new Error(data.content);}}catch(parseError){console.warn('Failed to parse streaming data:',line);}}}}}catch(error){if(onError)onError(error.message);throw error;}}();});return function processStream(_x){return _ref.apply(this,arguments);};}(),// Get conversation history\ngetConversationHistory:async sessionId=>{try{const response=await api.get(\"/conversations/\".concat(sessionId));return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to get conversation history');}},// Get all conversations\ngetAllConversations:async()=>{try{const response=await api.get('/conversations');return response.data;}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Failed to get conversations');}},// Delete a conversation\ndeleteConversation:async sessionId=>{try{const response=await api.delete(\"/conversations/\".concat(sessionId));return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'Failed to delete conversation');}},// Upload a file\nuploadFile:async function(file){let onProgress=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const formData=new FormData();formData.append('file',file);const response=await api.post('/upload',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{if(onProgress&&progressEvent.total){const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);onProgress(percentCompleted);}}});return response.data;}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||'Failed to upload file');}},// Upload document for chat\nuploadChatDocument:async(sessionId,formData)=>{try{const response=await api.post(\"/chat/upload?session_id=\".concat(sessionId),formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){var _error$response7,_error$response7$data;throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.detail)||'Failed to upload chat document');}},// Get chat documents\ngetChatDocuments:async sessionId=>{try{const response=await api.get(\"/chat/documents/\".concat(sessionId));return response.data;}catch(error){var _error$response8,_error$response8$data;throw new Error(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.detail)||'Failed to get chat documents');}},// Remove chat document\nremoveChatDocument:async(sessionId,docId)=>{try{const response=await api.delete(\"/chat/documents/\".concat(sessionId,\"/\").concat(docId));return response.data;}catch(error){var _error$response9,_error$response9$data;throw new Error(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.detail)||'Failed to remove chat document');}},// Get system health\ngetHealth:async()=>{try{const response=await api.get('/health');return response.data;}catch(error){var _error$response0,_error$response0$data;throw new Error(((_error$response0=error.response)===null||_error$response0===void 0?void 0:(_error$response0$data=_error$response0.data)===null||_error$response0$data===void 0?void 0:_error$response0$data.error)||'Failed to get system health');}},// Get processing status\ngetProcessingStatus:async processingId=>{try{const response=await api.get(\"/processing/\".concat(processingId));return response.data;}catch(error){var _error$response1,_error$response1$data;throw new Error(((_error$response1=error.response)===null||_error$response1===void 0?void 0:(_error$response1$data=_error$response1.data)===null||_error$response1$data===void 0?void 0:_error$response1$data.error)||'Failed to get processing status');}}};export const systemAPI={// Check if backend is available\ncheckBackendStatus:async()=>{try{const response=await api.get('/health');return{available:true,data:response.data};}catch(error){return{available:false,error:error.message};}},// Get system statistics (if available)\ngetStats:async()=>{try{const response=await api.get('/stats');return response.data;}catch(error){// Stats endpoint might not be available\nconsole.warn('Stats endpoint not available:',error.message);return null;}}};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}