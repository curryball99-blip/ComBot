{"ast":null,"code":"function partial(func) {\n  for (var _len = arguments.length, partialArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    partialArgs[_key - 1] = arguments[_key];\n  }\n  return partialImpl(func, placeholderSymbol, ...partialArgs);\n}\nfunction partialImpl(func, placeholder) {\n  for (var _len2 = arguments.length, partialArgs = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    partialArgs[_key2 - 2] = arguments[_key2];\n  }\n  const partialed = function () {\n    for (var _len3 = arguments.length, providedArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      providedArgs[_key3] = arguments[_key3];\n    }\n    let providedArgsIndex = 0;\n    const substitutedArgs = partialArgs.slice().map(arg => arg === placeholder ? providedArgs[providedArgsIndex++] : arg);\n    const remainingArgs = providedArgs.slice(providedArgsIndex);\n    return func.apply(this, substitutedArgs.concat(remainingArgs));\n  };\n  if (func.prototype) {\n    partialed.prototype = Object.create(func.prototype);\n  }\n  return partialed;\n}\nconst placeholderSymbol = Symbol('partial.placeholder');\npartial.placeholder = placeholderSymbol;\nexport { partial, partialImpl };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}