{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { noop } from 'es-toolkit';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nimport configUpdate from './configUpdate';\nimport { configEasing } from './easing';\nimport { useAnimationManager } from './useAnimationManager';\nvar defaultJavascriptAnimateProps = {\n  begin: 0,\n  duration: 1000,\n  easing: 'ease',\n  isActive: true,\n  canBegin: true,\n  onAnimationEnd: () => {},\n  onAnimationStart: () => {}\n};\nvar from = {\n  t: 0\n};\nvar to = {\n  t: 1\n};\nexport function JavascriptAnimate(outsideProps) {\n  var props = resolveDefaultProps(outsideProps, defaultJavascriptAnimateProps);\n  var {\n    isActive,\n    canBegin,\n    duration,\n    easing,\n    begin,\n    onAnimationEnd,\n    onAnimationStart,\n    children\n  } = props;\n  var animationManager = useAnimationManager('JavascriptAnimate', props.animationManager);\n  var [style, setStyle] = useState(isActive ? from : to);\n  var stopJSAnimation = useRef(null);\n  useEffect(() => {\n    if (!isActive) {\n      setStyle(to);\n    }\n  }, [isActive]);\n  useEffect(() => {\n    if (!isActive || !canBegin) {\n      return noop;\n    }\n    var startAnimation = configUpdate(from, to, configEasing(easing), duration, setStyle, animationManager.getTimeoutController());\n    var onAnimationActive = () => {\n      stopJSAnimation.current = startAnimation();\n    };\n    animationManager.start([onAnimationStart, begin, onAnimationActive, duration, onAnimationEnd]);\n    return () => {\n      animationManager.stop();\n      if (stopJSAnimation.current) {\n        stopJSAnimation.current();\n      }\n      onAnimationEnd();\n    };\n  }, [isActive, canBegin, duration, easing, begin, onAnimationStart, onAnimationEnd, animationManager]);\n  return children(style.t);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}