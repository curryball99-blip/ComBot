{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { chatAPI } from '../services/api';\nconst useChatStore = create(persist((set, get) => ({\n  // Current conversation state\n  currentSessionId: null,\n  messages: [],\n  isLoading: false,\n  isTyping: false,\n  error: null,\n  // Conversation management\n  conversations: [],\n  isLoadingConversations: false,\n  // UI state\n  sidebarOpen: true,\n  uploadModalOpen: false,\n  // Actions\n  setCurrentSession: async sessionId => {\n    const {\n      currentSessionId\n    } = get();\n\n    // Don't reload if it's the same session\n    if (currentSessionId === sessionId) {\n      return;\n    }\n\n    // Load conversation history if sessionId exists\n    if (sessionId) {\n      set({\n        currentSessionId: sessionId,\n        error: null\n      });\n      await get().loadConversationHistory(sessionId);\n    } else {\n      // Only clear messages for new conversation\n      set({\n        currentSessionId: sessionId,\n        messages: [],\n        error: null\n      });\n    }\n  },\n  // Send a message (temporarily forcing non-streaming until backend streaming stabilized)\n  sendMessage: async (messageText, streaming = false, useInternetSearch = false, aiParams = {}) => {\n    const {\n      currentSessionId\n    } = get();\n    set({\n      isLoading: true,\n      error: null\n    });\n\n    // Add user message immediately to UI\n    const userMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: messageText,\n      timestamp: new Date().toISOString()\n    };\n    set(state => ({\n      messages: [...state.messages, userMessage],\n      isTyping: true\n    }));\n    try {\n      {\n        // Non-streaming response (fallback)\n        const response = await chatAPI.sendMessage(messageText, currentSessionId, false, useInternetSearch, aiParams);\n        const botMessage = {\n          id: (Date.now() + 1).toString(),\n          type: 'bot',\n          content: response.response,\n          timestamp: response.timestamp || new Date().toISOString(),\n          sources: response.sources || [],\n          session_id: response.session_id\n        };\n        set(state => ({\n          messages: [...state.messages, botMessage],\n          currentSessionId: response.session_id,\n          isLoading: false,\n          isTyping: false\n        }));\n        get().loadConversations();\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'error',\n        content: error.message || 'Failed to get response. Please try again.',\n        timestamp: new Date().toISOString()\n      };\n      set(state => ({\n        messages: [...state.messages, errorMessage],\n        isLoading: false,\n        isTyping: false,\n        error: error.message\n      }));\n    }\n  },\n  // Load conversation history\n  loadConversationHistory: async sessionId => {\n    if (!sessionId) return;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const history = await chatAPI.getConversationHistory(sessionId);\n      console.log('Loaded history for session:', sessionId, history);\n      console.log('First entry structure:', history[0]);\n\n      // Convert history to message format\n      const messages = [];\n      if (history && Array.isArray(history)) {\n        history.forEach(entry => {\n          if (entry.query) {\n            messages.push({\n              id: `${entry.id}-user`,\n              type: 'user',\n              content: entry.query,\n              timestamp: entry.timestamp\n            });\n          }\n          if (entry.response) {\n            messages.push({\n              id: `${entry.id}-bot`,\n              type: 'bot',\n              content: entry.response,\n              timestamp: entry.timestamp,\n              sources: entry.sources || []\n            });\n          }\n        });\n      }\n      console.log('Converted messages:', messages);\n      set({\n        messages,\n        isLoading: false\n      });\n    } catch (error) {\n      console.error('Failed to load conversation history:', error);\n      set({\n        isLoading: false,\n        error: error.message\n      });\n    }\n  },\n  // Load all conversations\n  loadConversations: async () => {\n    set({\n      isLoadingConversations: true\n    });\n    try {\n      const conversations = await chatAPI.getAllConversations();\n      set({\n        conversations: conversations || [],\n        isLoadingConversations: false\n      });\n    } catch (error) {\n      console.error('Failed to load conversations:', error);\n      set({\n        conversations: [],\n        isLoadingConversations: false\n      });\n    }\n  },\n  // Start new conversation\n  startNewConversation: () => {\n    const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    set({\n      currentSessionId: newSessionId,\n      messages: [],\n      error: null\n    });\n  },\n  // Delete conversation\n  deleteConversation: async sessionId => {\n    try {\n      await chatAPI.deleteConversation(sessionId);\n\n      // Remove from conversations list\n      set(state => ({\n        conversations: state.conversations.filter(conv => conv.session_id !== sessionId)\n      }));\n\n      // If it was the current conversation, start new one\n      const {\n        currentSessionId\n      } = get();\n      if (currentSessionId === sessionId) {\n        get().startNewConversation();\n      }\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n      set({\n        error: error.message\n      });\n    }\n  },\n  // Rename conversation\n  renameConversation: async (sessionId, newTitle) => {\n    try {\n      // Update locally first for immediate feedback\n      set(state => ({\n        conversations: state.conversations.map(conv => conv.session_id === sessionId ? {\n          ...conv,\n          title: newTitle\n        } : conv)\n      }));\n\n      // TODO: Add API call when backend supports it\n      // await chatAPI.renameConversation(sessionId, newTitle);\n    } catch (error) {\n      console.error('Failed to rename conversation:', error);\n      // Revert on error\n      get().loadConversations();\n      set({\n        error: error.message\n      });\n    }\n  },\n  // Clear messages (for current conversation)\n  clearMessages: () => {\n    set({\n      messages: [],\n      error: null\n    });\n  },\n  // Clear error\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  // Toggle sidebar\n  toggleSidebar: () => {\n    set(state => ({\n      sidebarOpen: !state.sidebarOpen\n    }));\n  },\n  // Toggle upload modal\n  toggleUploadModal: () => {\n    set(state => ({\n      uploadModalOpen: !state.uploadModalOpen\n    }));\n  },\n  // Set loading state\n  setLoading: isLoading => {\n    set({\n      isLoading\n    });\n  },\n  // Set typing state\n  setTyping: isTyping => {\n    set({\n      isTyping\n    });\n  }\n}), {\n  name: 'comviva-chat-store',\n  partialize: state => ({\n    currentSessionId: state.currentSessionId,\n    messages: state.messages,\n    sidebarOpen: state.sidebarOpen,\n    conversations: state.conversations\n  })\n}));\nexport default useChatStore;","map":{"version":3,"names":["create","persist","chatAPI","useChatStore","set","get","currentSessionId","messages","isLoading","isTyping","error","conversations","isLoadingConversations","sidebarOpen","uploadModalOpen","setCurrentSession","sessionId","loadConversationHistory","sendMessage","messageText","streaming","useInternetSearch","aiParams","userMessage","id","Date","now","toString","type","content","timestamp","toISOString","state","response","botMessage","sources","session_id","loadConversations","console","errorMessage","message","history","getConversationHistory","log","Array","isArray","forEach","entry","query","push","getAllConversations","startNewConversation","newSessionId","Math","random","substr","deleteConversation","filter","conv","renameConversation","newTitle","map","title","clearMessages","clearError","toggleSidebar","toggleUploadModal","setLoading","setTyping","name","partialize"],"sources":["/home/ubuntu/Ravi/ComBot/frontend/src/stores/chatStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { chatAPI } from '../services/api';\n\nconst useChatStore = create(\n  persist(\n    (set, get) => ({\n      // Current conversation state\n      currentSessionId: null,\n      messages: [],\n      isLoading: false,\n      isTyping: false,\n      error: null,\n\n      // Conversation management\n      conversations: [],\n      isLoadingConversations: false,\n\n      // UI state\n      sidebarOpen: true,\n      uploadModalOpen: false,\n\n      // Actions\n      setCurrentSession: async (sessionId) => {\n        const { currentSessionId } = get();\n\n        // Don't reload if it's the same session\n        if (currentSessionId === sessionId) {\n          return;\n        }\n\n        // Load conversation history if sessionId exists\n        if (sessionId) {\n          set({ currentSessionId: sessionId, error: null });\n          await get().loadConversationHistory(sessionId);\n        } else {\n          // Only clear messages for new conversation\n          set({ currentSessionId: sessionId, messages: [], error: null });\n        }\n      },\n\n      // Send a message (temporarily forcing non-streaming until backend streaming stabilized)\n      sendMessage: async (messageText, streaming = false, useInternetSearch = false, aiParams = {}) => {\n        const { currentSessionId } = get();\n\n        set({ isLoading: true, error: null });\n\n        // Add user message immediately to UI\n        const userMessage = {\n          id: Date.now().toString(),\n          type: 'user',\n          content: messageText,\n          timestamp: new Date().toISOString(),\n        };\n\n        set((state) => ({\n          messages: [...state.messages, userMessage],\n          isTyping: true,\n        }));\n\n        try {\n          {\n            // Non-streaming response (fallback)\n            const response = await chatAPI.sendMessage(messageText, currentSessionId, false, useInternetSearch, aiParams);\n\n            const botMessage = {\n              id: (Date.now() + 1).toString(),\n              type: 'bot',\n              content: response.response,\n              timestamp: response.timestamp || new Date().toISOString(),\n              sources: response.sources || [],\n              session_id: response.session_id,\n            };\n\n            set((state) => ({\n              messages: [...state.messages, botMessage],\n              currentSessionId: response.session_id,\n              isLoading: false,\n              isTyping: false,\n            }));\n\n            get().loadConversations();\n          }\n\n        } catch (error) {\n          console.error('Failed to send message:', error);\n\n          // Add error message\n          const errorMessage = {\n            id: (Date.now() + 1).toString(),\n            type: 'error',\n            content: error.message || 'Failed to get response. Please try again.',\n            timestamp: new Date().toISOString(),\n          };\n\n          set((state) => ({\n            messages: [...state.messages, errorMessage],\n            isLoading: false,\n            isTyping: false,\n            error: error.message,\n          }));\n        }\n      },\n\n      // Load conversation history\n      loadConversationHistory: async (sessionId) => {\n        if (!sessionId) return;\n\n        set({ isLoading: true, error: null });\n\n        try {\n          const history = await chatAPI.getConversationHistory(sessionId);\n          console.log('Loaded history for session:', sessionId, history);\n          console.log('First entry structure:', history[0]);\n\n          // Convert history to message format\n          const messages = [];\n          if (history && Array.isArray(history)) {\n            history.forEach((entry) => {\n              if (entry.query) {\n                messages.push({\n                  id: `${entry.id}-user`,\n                  type: 'user',\n                  content: entry.query,\n                  timestamp: entry.timestamp,\n                });\n              }\n              if (entry.response) {\n                messages.push({\n                  id: `${entry.id}-bot`,\n                  type: 'bot',\n                  content: entry.response,\n                  timestamp: entry.timestamp,\n                  sources: entry.sources || [],\n                });\n              }\n            });\n          }\n          console.log('Converted messages:', messages);\n\n          set({\n            messages,\n            isLoading: false,\n          });\n\n        } catch (error) {\n          console.error('Failed to load conversation history:', error);\n          set({\n            isLoading: false,\n            error: error.message,\n          });\n        }\n      },\n\n      // Load all conversations\n      loadConversations: async () => {\n        set({ isLoadingConversations: true });\n\n        try {\n          const conversations = await chatAPI.getAllConversations();\n          set({\n            conversations: conversations || [],\n            isLoadingConversations: false,\n          });\n        } catch (error) {\n          console.error('Failed to load conversations:', error);\n          set({\n            conversations: [],\n            isLoadingConversations: false,\n          });\n        }\n      },\n\n      // Start new conversation\n      startNewConversation: () => {\n        const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        set({\n          currentSessionId: newSessionId,\n          messages: [],\n          error: null,\n        });\n      },\n\n      // Delete conversation\n      deleteConversation: async (sessionId) => {\n        try {\n          await chatAPI.deleteConversation(sessionId);\n\n          // Remove from conversations list\n          set((state) => ({\n            conversations: state.conversations.filter(\n              (conv) => conv.session_id !== sessionId\n            ),\n          }));\n\n          // If it was the current conversation, start new one\n          const { currentSessionId } = get();\n          if (currentSessionId === sessionId) {\n            get().startNewConversation();\n          }\n\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ error: error.message });\n        }\n      },\n\n      // Rename conversation\n      renameConversation: async (sessionId, newTitle) => {\n        try {\n          // Update locally first for immediate feedback\n          set((state) => ({\n            conversations: state.conversations.map((conv) =>\n              conv.session_id === sessionId\n                ? { ...conv, title: newTitle }\n                : conv\n            ),\n          }));\n\n          // TODO: Add API call when backend supports it\n          // await chatAPI.renameConversation(sessionId, newTitle);\n\n        } catch (error) {\n          console.error('Failed to rename conversation:', error);\n          // Revert on error\n          get().loadConversations();\n          set({ error: error.message });\n        }\n      },\n\n      // Clear messages (for current conversation)\n      clearMessages: () => {\n        set({ messages: [], error: null });\n      },\n\n      // Clear error\n      clearError: () => {\n        set({ error: null });\n      },\n\n      // Toggle sidebar\n      toggleSidebar: () => {\n        set((state) => ({ sidebarOpen: !state.sidebarOpen }));\n      },\n\n      // Toggle upload modal\n      toggleUploadModal: () => {\n        set((state) => ({ uploadModalOpen: !state.uploadModalOpen }));\n      },\n\n      // Set loading state\n      setLoading: (isLoading) => {\n        set({ isLoading });\n      },\n\n      // Set typing state\n      setTyping: (isTyping) => {\n        set({ isTyping });\n      },\n    }),\n    {\n      name: 'comviva-chat-store',\n      partialize: (state) => ({\n        currentSessionId: state.currentSessionId,\n        messages: state.messages,\n        sidebarOpen: state.sidebarOpen,\n        conversations: state.conversations,\n      }),\n    }\n  )\n);\n\nexport default useChatStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}