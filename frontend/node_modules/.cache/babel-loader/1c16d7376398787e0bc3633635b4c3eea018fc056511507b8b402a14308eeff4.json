{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { noop } from 'es-toolkit';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nimport { useAnimationManager } from './useAnimationManager';\nimport { getTransitionVal } from './util';\nvar defaultProps = {\n  begin: 0,\n  duration: 1000,\n  easing: 'ease',\n  isActive: true,\n  canBegin: true,\n  onAnimationEnd: () => {},\n  onAnimationStart: () => {}\n};\nexport function CSSTransitionAnimate(outsideProps) {\n  var props = resolveDefaultProps(outsideProps, defaultProps);\n  var {\n    from,\n    to,\n    attributeName,\n    isActive,\n    canBegin,\n    duration,\n    easing,\n    begin,\n    onAnimationEnd,\n    onAnimationStart,\n    children\n  } = props;\n  var animationManager = useAnimationManager(attributeName, props.animationManager);\n  var [style, setStyle] = useState(isActive ? from : to);\n  useEffect(() => {\n    if (!isActive) {\n      setStyle(to);\n    }\n  }, [isActive, to]);\n  useEffect(() => {\n    if (!isActive || !canBegin) {\n      return noop;\n    }\n    var unsubscribe = animationManager.subscribe(setStyle);\n    animationManager.start([onAnimationStart, begin, to, duration, onAnimationEnd]);\n    return () => {\n      animationManager.stop();\n      if (unsubscribe) {\n        unsubscribe();\n      }\n      onAnimationEnd();\n    };\n  }, [isActive, canBegin, duration, easing, begin, onAnimationStart, onAnimationEnd, animationManager, to]);\n  if (isActive && canBegin) {\n    var transition = getTransitionVal([attributeName], duration, easing);\n    return children({\n      transition,\n      [attributeName]: style\n    });\n  }\n  return children({\n    [attributeName]: style\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}