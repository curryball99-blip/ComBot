{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/Ravi/ComBot/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _awaitAsyncGenerator from\"/home/ubuntu/Ravi/ComBot/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";import _wrapAsyncGenerator from\"/home/ubuntu/Ravi/ComBot/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";// Updated to connect to new LangGraph backend\n// Updated to connect to new LangGraph backend - Server deployment configuration\n// Updated to connect to new LangGraph backend - Server deployment configuration\n// Determine API base URL dynamically when REACT_APP_API_URL not provided.\n// Previous logic incorrectly mapped the public IP to \"localhost\", which broke external access.\n// Rule now:\n//   1. If explicit REACT_APP_API_URL set -> use it.\n//   2. If running on localhost dev -> http://localhost:8000\n//   3. Otherwise reuse the current host (public IP or domain) with backend port 8000.\n//   4. Support same protocol upgrade if site served via https.\nconst getApiBaseUrl=()=>{try{const{protocol,hostname}=window.location;const isLocal=['localhost','127.0.0.1'].includes(hostname);if(isLocal||process.env.NODE_ENV==='development'){return'http://localhost:8000';}// Use same protocol if https (behind reverse proxy / load balancer)\nconst backendProtocol=protocol==='https:'?'https':'http';return\"\".concat(backendProtocol,\"://\").concat(hostname,\":8000\");}catch(e){// Fallback hard-coded default\nreturn'http://localhost:8000';}};const API_BASE_URL=process.env.REACT_APP_API_URL&&process.env.REACT_APP_API_URL.trim()||getApiBaseUrl();// Debug logging\nif(typeof window!=='undefined'){console.log('🔧 API Configuration:',{pageLocation:window.location.href,hostname:window.location.hostname,apiBaseUrl:API_BASE_URL,env:process.env.NODE_ENV,explicitEnvVar:!!process.env.REACT_APP_API_URL});}export const chatAPI={// Main sendMessage method that the chat store expects\nsendMessage:async function(message){let sessionId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let streaming=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let useInternetSearch=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let aiParams=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};console.log('🚀 sendMessage called with:',{message,sessionId,streaming,useInternetSearch,apiUrl:API_BASE_URL});try{const requestBody=_objectSpread({message,session_id:sessionId,stream:streaming,internet_search:useInternetSearch},aiParams);console.log('📡 Making request to:',\"\".concat(API_BASE_URL,\"/api/chat\"),'with body:',requestBody);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});console.log('📥 Response status:',response.status,response.statusText);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ API response:',result);return result;}catch(error){console.error('❌ Send message API error:',error);throw error;}},// Compatibility shim: some UI code expects chatAPI.processStream.\n// For now we don't have a true streaming backend. The store currently calls:\n//   processStream(initialResponse, onChunk, onComplete, onError)\n// where 'initialResponse' is the full JSON returned by sendMessage.\n// We'll emulate streaming by splitting the full response text into word chunks\n// and invoking callbacks. No extra network call (previous shim caused a 2nd POST with\n// wrong argument ordering -> 422).\nprocessStream:(initial,onChunk,onComplete,onError)=>{try{// Detect signature misuse. If first param is a string, treat as message and do a fallback send.\nif(typeof initial==='string'){console.warn('[processStream] Received string instead of initial response object; performing single non-streaming request.');return _wrapAsyncGenerator(function*(){const result=yield _awaitAsyncGenerator(chatAPI.sendMessage(initial,null,false));// Simulate chunking\nconst words=(result.response||'').split(/\\s+/);for(const w of words){if(onChunk)onChunk(w+' ');yield w;// allow for-await consumer\n}if(onComplete)onComplete(result);})();}const fullText=initial&&typeof initial==='object'?initial.response||'':'';const words=fullText.split(/\\s+/).filter(Boolean);// Create async generator that yields each \"chunk\" (word) to satisfy for-await loop in store\nconst generator=_wrapAsyncGenerator(function*(){for(const w of words){if(onChunk)onChunk(w+' ');yield w;}if(onComplete)onComplete(initial);})();return generator;}catch(err){console.error('[processStream] Emulation error',err);if(onError)onError(err.message||String(err));// Return an empty async generator to keep caller logic safe\nreturn _wrapAsyncGenerator(function*(){})();}},chat:async function(message){let conversationId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message,session_id:conversationId})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Chat API error:',error);throw error;}},workflow:async function(message){let conversationId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/workflow\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message,conversation_id:conversationId})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Workflow API error:',error);throw error;}},search:async function(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/search?query=\").concat(encodeURIComponent(query),\"&limit=\").concat(limit),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Search API error:',error);throw error;}},clearConversation:async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/clear-conversation\"),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Clear conversation error:',error);throw error;}},getConversation:async conversationId=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/conversation/\").concat(conversationId),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Get conversation error:',error);throw error;}}};export const systemAPI={health:async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/health\"),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Health check error:',error);throw error;}},getSystemInfo:async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/system/info\"),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('System info error:',error);throw error;}}};// JIRA Dashboard API endpoints\nexport const jiraAPI={// Live Summary (new)\ngetLiveSummary:async function(){let range=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'30d';const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/live/summary?range=\").concat(encodeURIComponent(range)));if(!response.ok)throw new Error(\"Live summary error \".concat(response.status));return response.json();},// Live Team Analytics (new)\ngetLiveTeam:async()=>{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/live/team\"));if(!response.ok)throw new Error(\"Live team error \".concat(response.status));return response.json();},// Live Search (new)\nliveSearch:async function(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;const body={query,limit};const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/live/search\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)});if(!response.ok)throw new Error(\"Live search error \".concat(response.status));return response.json();},// --- Legacy below (kept temporarily) ---\n// Dashboard data\ngetDashboard:async function(){let dateRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'30d';try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/dashboard?dateRange=\").concat(dateRange),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('JIRA Dashboard API error:',error);throw error;}},// Team analytics\ngetTeamAnalytics:async function(){let dateRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'30d';try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/team-analytics?dateRange=\").concat(dateRange),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('JIRA Team Analytics API error:',error);throw error;}},// Search tickets\nsearchTickets:async function(query){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const params=new URLSearchParams(_objectSpread({query},filters));const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/search?\").concat(params),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('JIRA Search API error:',error);throw error;}},// Get member details\ngetMemberDetails:async memberId=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/member/\").concat(memberId),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('JIRA Member Details API error:',error);throw error;}},// Filter options\ngetFilterOptions:async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/filter-options\"),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('JIRA Filter Options API error:',error);throw error;}},// Analyze ticket with AI\nanalyzeTicket:async function(ticketKey){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const requestBody={ticket_key:ticketKey,max_references:options.maxReferences||5,include_semantic_search:options.includeSemanticSearch!==false,analysis_depth:options.analysisDepth||\"comprehensive\"};console.log('🔍 Analyzing ticket:',ticketKey,'with options:',requestBody);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/jira/analyze\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ Analysis complete:',result);return result;}catch(error){console.error('❌ JIRA Analyze API error:',error);throw error;}}};// Document processing API\nexport const documentAPI={// Upload and process document\nuploadDocument:async function(file){let metadata=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const formData=new FormData();formData.append('file',file);formData.append('metadata',JSON.stringify(metadata));const response=await fetch(\"\".concat(API_BASE_URL,\"/api/documents/upload\"),{method:'POST',body:formData});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Document upload error:',error);throw error;}},// Get processing status\ngetProcessingStatus:async taskId=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/documents/status/\").concat(taskId),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Document status error:',error);throw error;}}};// Chat Session Management API (NEW)\nexport const sessionAPI={// Create new chat session\ncreateSession:async function(){let userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'default_user';let title=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{console.log('📝 Creating new session:',{userId,title});const response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat/sessions\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user_id:userId,title:title||\"Chat \".concat(new Date().toLocaleString())})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ Session created:',result);return result;}catch(error){console.error('❌ Create session error:',error);throw error;}},// List all chat sessions\nlistSessions:async function(){let userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;try{const params=new URLSearchParams();if(userId)params.append('user_id',userId);if(limit)params.append('limit',limit.toString());const url=\"\".concat(API_BASE_URL,\"/api/chat/sessions\").concat(params.toString()?'?'+params.toString():'');console.log('📋 Loading sessions from:',url);const response=await fetch(url,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ Sessions loaded:',result);return result.sessions||[];}catch(error){console.error('❌ List sessions error:',error);throw error;}},// Get session info\ngetSession:async sessionId=>{try{console.log('📄 Getting session info:',sessionId);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat/sessions/\").concat(sessionId),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ Session info loaded:',result);return result;}catch(error){console.error('❌ Get session error:',error);throw error;}},// Delete chat session\ndeleteSession:async sessionId=>{try{console.log('🗑️ Deleting session:',sessionId);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat/sessions/\").concat(sessionId),{method:'DELETE',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ Session deleted:',result);return result;}catch(error){console.error('❌ Delete session error:',error);throw error;}},// Get chat history for session\ngetSessionHistory:async function(sessionId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;try{console.log('📜 Loading session history:',sessionId);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat/sessions/\").concat(sessionId,\"/history?limit=\").concat(limit),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('✅ Session history loaded:',result);return result.messages||[];}catch(error){console.error('❌ Get session history error:',error);throw error;}}};export default{chatAPI,systemAPI,jiraAPI,documentAPI,sessionAPI};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}