{"ast":null,"code":"import { delay } from '../promise/delay.mjs';\nconst DEFAULT_DELAY = 0;\nconst DEFAULT_RETRIES = Number.POSITIVE_INFINITY;\nasync function retry(func, _options) {\n  let delay$1;\n  let retries;\n  let signal;\n  if (typeof _options === 'number') {\n    delay$1 = DEFAULT_DELAY;\n    retries = _options;\n    signal = undefined;\n  } else {\n    var _options$delay, _options$retries;\n    delay$1 = (_options$delay = _options === null || _options === void 0 ? void 0 : _options.delay) !== null && _options$delay !== void 0 ? _options$delay : DEFAULT_DELAY;\n    retries = (_options$retries = _options === null || _options === void 0 ? void 0 : _options.retries) !== null && _options$retries !== void 0 ? _options$retries : DEFAULT_RETRIES;\n    signal = _options === null || _options === void 0 ? void 0 : _options.signal;\n  }\n  let error;\n  for (let attempts = 0; attempts < retries; attempts++) {\n    var _signal;\n    if ((_signal = signal) !== null && _signal !== void 0 && _signal.aborted) {\n      throw error !== null && error !== void 0 ? error : new Error(\"The retry operation was aborted due to an abort signal.\");\n    }\n    try {\n      return await func();\n    } catch (err) {\n      error = err;\n      const currentDelay = typeof delay$1 === 'function' ? delay$1(attempts) : delay$1;\n      await delay(currentDelay);\n    }\n  }\n  throw error;\n}\nexport { retry };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}