{"ast":null,"code":"import { AbortError } from '../error/AbortError.mjs';\nfunction delay(ms) {\n  let {\n    signal\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    const abortError = () => {\n      reject(new AbortError());\n    };\n    const abortHandler = () => {\n      clearTimeout(timeoutId);\n      abortError();\n    };\n    if (signal !== null && signal !== void 0 && signal.aborted) {\n      return abortError();\n    }\n    const timeoutId = setTimeout(() => {\n      signal === null || signal === void 0 || signal.removeEventListener('abort', abortHandler);\n      resolve();\n    }, ms);\n    signal === null || signal === void 0 || signal.addEventListener('abort', abortHandler, {\n      once: true\n    });\n  });\n}\nexport { delay };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}