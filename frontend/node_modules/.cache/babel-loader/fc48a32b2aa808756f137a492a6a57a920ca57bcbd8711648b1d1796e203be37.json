{"ast":null,"code":"import { getStackSeriesIdentifier } from '../../../util/stacks/getStackSeriesIdentifier';\nimport { getValueByDataKey } from '../../../util/ChartUtils';\n\n/**\n * In a stacked chart, each graphical item has its own data. That data could be either:\n * - defined on the chart root, in which case the item gets a unique dataKey\n * - or defined on the item itself, in which case multiple items can share the same dataKey\n *\n * That means we cannot use the dataKey as a unique identifier for the item.\n *\n * This type represents a single data point in a stacked chart, where each key is a series identifier\n * and the value is the numeric value for that series using the numerical axis dataKey.\n */\n\nexport function combineDisplayedStackedData(stackedGraphicalItems, _ref, tooltipAxisSettings) {\n  var {\n    chartData = []\n  } = _ref;\n  var tooltipDataKey = tooltipAxisSettings === null || tooltipAxisSettings === void 0 ? void 0 : tooltipAxisSettings.dataKey;\n\n  // A map of tooltip data keys to the stacked data points\n  var knownItemsByDataKey = new Map();\n  stackedGraphicalItems.forEach(item => {\n    var _item$data;\n    // If there is no data on the individual item then we use the root chart data\n    var resolvedData = (_item$data = item.data) !== null && _item$data !== void 0 ? _item$data : chartData;\n    if (resolvedData == null || resolvedData.length === 0) {\n      // if that didn't work then we skip this item\n      return;\n    }\n    var stackIdentifier = getStackSeriesIdentifier(item);\n    resolvedData.forEach((entry, index) => {\n      var tooltipValue = tooltipDataKey == null ? index : String(getValueByDataKey(entry, tooltipDataKey, null));\n      var numericValue = getValueByDataKey(entry, item.dataKey, 0);\n      var curr;\n      if (knownItemsByDataKey.has(tooltipValue)) {\n        curr = knownItemsByDataKey.get(tooltipValue);\n      } else {\n        curr = {};\n      }\n      Object.assign(curr, {\n        [stackIdentifier]: numericValue\n      });\n      knownItemsByDataKey.set(tooltipValue, curr);\n    });\n  });\n  return Array.from(knownItemsByDataKey.values());\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}